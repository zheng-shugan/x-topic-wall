<h1 style="text-align: center; font-family: Arial, sans-serif; color: #d30001;">X Topic Wall</h1>

<div style="text-align: center; margin-bottom: 20px;">
  <input type="text" id="search-input" placeholder="Input Topic" 
         style="padding: 10px; width: 300px; border: 1px solid #ccc; border-radius: 5px; margin-right: 10px;">
  <button id="search-button" 
          style="padding: 10px 20px; background-color: #d30001; color: white; border: none; border-radius: 5px; cursor: pointer;">
    Search
  </button>
  <button id="toggle-polling" 
          style="padding: 10px 20px; background-color: #1DA1F2; color: white; border: none; border-radius: 5px; cursor: pointer; margin-left: 10px;">
    Search and Polling
  </button>
</div>

<div id="tweets-container" style="max-width: 800px; margin: 0 auto; font-family: Arial, sans-serif;">
  <p style="text-align: center; font-size: 18px; color: #999;">No tweets available at the moment.</p>
</div>

<script>
  let pollingInterval = null;
  let currentQuery = '';
  const POLLING_INTERVAL = 60000; // 1分钟

  function fetchTweets(query) {
    if (!query.trim()) return;

    fetch(`/tweets/fetch_tweets?query=${encodeURIComponent(query)}`, {
      headers: {
        'X-Requested-With': 'XMLHttpRequest'
      }
    })
    .then(response => {
      if (!response.ok) {
        throw new Error('Network response was not ok');
      }
      return response.text();
    })
    .then(html => {
      const container = document.getElementById('tweets-container');
      container.innerHTML = html;
    })
    .catch(error => {
      console.error('Error fetching tweets:', error);
      const container = document.getElementById('tweets-container');
      container.innerHTML = '<p style="text-align: center; font-size: 18px; color: #999;">Failed to fetch tweets. Please try again later.</p>';
    });
  }

  function startPolling() {
    if (pollingInterval) return;
    
    currentQuery = document.getElementById('search-input').value;
    if (!currentQuery.trim()) {
      alert('Please enter a search query first');
      return;
    }

    // 立即执行一次
    fetchTweets(currentQuery);
    
    // 设置定时器
    pollingInterval = setInterval(() => {
      fetchTweets(currentQuery);
    }, POLLING_INTERVAL);

    // 更新按钮状态
    document.getElementById('toggle-polling').textContent = 'Stop Polling';
    document.getElementById('toggle-polling').style.backgroundColor = '#dc3545';
  }

  function stopPolling() {
    if (pollingInterval) {
      clearInterval(pollingInterval);
      pollingInterval = null;
      document.getElementById('toggle-polling').textContent = 'Start Polling';
      document.getElementById('toggle-polling').style.backgroundColor = '#1DA1F2';
    }
  }

  // 搜索按钮点击事件
  document.getElementById('search-button').addEventListener('click', function() {
    const query = document.getElementById('search-input').value;
    if (query.trim()) {
      currentQuery = query;
      fetchTweets(query);
    }
  });

  // 轮询开关按钮点击事件
  document.getElementById('toggle-polling').addEventListener('click', function() {
    if (pollingInterval) {
      stopPolling();
    } else {
      startPolling();
    }
  });

  // 添加回车键搜索功能
  document.getElementById('search-input').addEventListener('keypress', function(e) {
    if (e.key === 'Enter') {
      document.getElementById('search-button').click();
    }
  });

  // 页面关闭时停止轮询
  window.addEventListener('beforeunload', stopPolling);
</script>